        -:    0:Source:print_tokens_instrumented.c
        -:    0:Graph:print_tokens_instrumented.gcno
        -:    0:Data:print_tokens_instrumented.gcda
        -:    0:Runs:4130
        -:    1:
        -:    2:
        -:    3:# include <ctype.h>
        -:    4:
        -:    5:# define START  5
        -:    6:# define TRUE  1
        -:    7:# define FALSE 0
        -:    8:
        -:    9:typedef int BOOLEAN;
        -:   10:typedef char *string;
        -:   11:
        -:   12:# include <stdio.h>
        -:   13:# include "tokens.h"
        -:   14:
        -:   15:static token numeric_case();
        -:   16:static token error_or_eof_case();
        -:   17:static int check_delimiter();
        -:   18:static int keyword(int state);
        -:   19:static int special(int state);
        -:   20:static skip(character_stream stream_ptr);
        -:   21:static int constant(int state,char token_str[],int token_ind);
        -:   22:static int next_state();
        -:   23:static get_actual_token(char token_str[],int token_ind);
        -:   24:
        -:   25:#include <stdio.h>
        -:   26:FILE* file_name = NULL;
        -:   27:
        -:   28:
     4130:   29:main(argc,argv)
        -:   30:int argc;
        -:   31:char *argv[];
        -:   32:{   
     4130:   33:    file_name=fopen("v3.txt","a+"); 
     4130:   34:    if(!file_name)
        -:   35:    {	
    #####:   36:        printf("File could not be opened! \n");
    #####:   37:        fclose(file_name);
    #####:   38:        exit(0);
        -:   39:    }
     4130:   40:	fprintf(file_name,"\nP1,");
        -:   41:    token token_ptr;
        -:   42:    token_stream stream_ptr;
        -:   43:
     4130:   44:    if(argc>2)
        -:   45:    {
       30:   46:        fprintf(stdout, "The format is print_tokens filename(optional)\n");
       30:   47:        fprintf(file_name,"P2,");
       30:   48:        fclose(file_name);
       30:   49:        exit(1);
        -:   50:    }
     4100:   51:    fprintf(file_name,"P3,");
     4100:   52:    stream_ptr=open_token_stream(argv[1]);
        -:   53:
    32897:   54:    while(!is_eof_token((token_ptr=get_token(stream_ptr))))
        -:   55:    {
    28827:   56:        fprintf(file_name,"P4,");
    28827:   57:        print_token(token_ptr);
        -:   58:    }
        -:   59:            
     4070:   60:    fprintf(file_name,"P5,");
     4070:   61:    print_token(token_ptr);
     4070:   62:    fclose(file_name);
     4070:   63:    exit(0);
        -:   64:}
        -:   65:
     4100:   66:character_stream open_character_stream(FILENAME)
        -:   67:string FILENAME;
        -:   68:{
     4100:   69:    fprintf(file_name,"P6,");
        -:   70:    character_stream stream_ptr;
        -:   71:
     4100:   72:    stream_ptr=(character_stream)malloc(sizeof(struct stream_type));
     4100:   73:    stream_ptr->stream_ind=START;
     4100:   74:    stream_ptr->stream[START]='\0';
     4100:   75:    if(FILENAME == NULL)
        -:   76:    {
     2963:   77:        fprintf(file_name,"P7,");
     2963:   78:        stream_ptr->fp=stdin;
        -:   79:    }
     1137:   80:    else if((stream_ptr->fp=fopen(FILENAME,"r"))==NULL)
        -:   81:    {
       30:   82:        fprintf(file_name,"P8,");
       30:   83:        fprintf(stdout, "The file %s doesn't exists\n",FILENAME);
       30:   84:        fclose(file_name);
       30:   85:        exit(0);
        -:   86:    }
     4070:   87:    fprintf(file_name,"P9,");
     4070:   88:    return(stream_ptr);
        -:   89:}
        -:   90:
   175094:   91:CHARACTER get_char(stream_ptr)
        -:   92:character_stream stream_ptr;
        -:   93:{
   175094:   94:    if(stream_ptr->stream[stream_ptr->stream_ind] == '\0')
        -:   95:    {
    12791:   96:        fprintf(file_name,"P10,");
    12791:   97:        if(fgets(stream_ptr->stream+START,80-START,stream_ptr->fp) == NULL)/* Fix bug: add -START - hf*/
        -:   98:        {
     4070:   99:            fprintf(file_name,"P11,");
     4070:  100:            stream_ptr->stream[START]=EOF;
        -:  101:        }
    12791:  102:        stream_ptr->stream_ind=START;
        -:  103:    }
   175094:  104:    fprintf(file_name,"P12,");
   175094:  105:    return(stream_ptr->stream[(stream_ptr->stream_ind)++]);
        -:  106:}
        -:  107:
    28823:  108:BOOLEAN is_end_of_character_stream(stream_ptr)
        -:  109:character_stream stream_ptr;
        -:  110:{
    28823:  111:    if(stream_ptr->stream[stream_ptr->stream_ind-1] == EOF){
     4110:  112:        fprintf(file_name,"P13,");
     4110:  113:        return(TRUE);
        -:  114:    }
        -:  115:        
        -:  116:    else{
    24713:  117:        fprintf(file_name,"P14,");
    24713:  118:        return(FALSE);
        -:  119:    }
        -:  120:        
        -:  121:}
        -:  122:
    14122:  123:unget_char(ch,stream_ptr)
        -:  124:CHARACTER ch;
        -:  125:character_stream stream_ptr;
        -:  126:{
    14122:  127:    if(stream_ptr->stream_ind == 0){
    #####:  128:        fprintf(file_name,"P15,");
    #####:  129:        return;
        -:  130:    }
        -:  131:    else{
    14122:  132:        fprintf(file_name,"P16,");
    14122:  133:        stream_ptr->stream[--(stream_ptr->stream_ind)]=ch;
        -:  134:    }
    14122:  135:    fprintf(file_name,"P17,");  
    14122:  136:    return;
        -:  137:}
        -:  138:
     4100:  139:token_stream open_token_stream(FILENAME)
        -:  140:string FILENAME;
        -:  141:{
     4100:  142:    fprintf(file_name,"P18,");  
        -:  143:    token_stream token_ptr;
        -:  144:  
     4100:  145:    token_ptr=(token_stream)malloc(sizeof(struct token_stream_type));
     4100:  146:    token_ptr->ch_stream=open_character_stream(FILENAME);/* Get character
        -:  147:                                                             stream  */
     4070:  148:    return(token_ptr);
        -:  149:}
        -:  150:
    32897:  151:token get_token(tstream_ptr)
        -:  152:token_stream tstream_ptr;
        -:  153:{
    32897:  154:    fprintf(file_name,"P19,");  
        -:  155:    char token_str[80]; /* This buffer stores the current token */
        -:  156:    int token_ind;      /* Index to the token_str  */
        -:  157:    token token_ptr;
        -:  158:    CHARACTER ch;
        -:  159:    int cu_state,next_st,token_found;
        -:  160:
    32897:  161:    token_ptr=(token)(malloc(sizeof(struct token_type)));
    32897:  162:    ch=get_char(tstream_ptr->ch_stream);
    32897:  163:    cu_state=token_ind=token_found=0;
   151418:  164:    while(!token_found)
        -:  165:    {
   151418:  166:        if(token_ind < 80) /* ADDED ERROR CHECK - hf */
        -:  167:        {
   151381:  168:            fprintf(file_name,"P20,");
   151381:  169:            token_str[token_ind++]=ch;
   151381:  170:            next_st=next_state(cu_state,ch);
        -:  171:        }
        -:  172:        else
        -:  173:        {
       37:  174:            fprintf(file_name,"P21,");
       37:  175:            next_st = -1; /* - hf */
        -:  176:        }
   151418:  177:        if (next_st == -1) 
        -:  178:        {
    11126:  179:            fprintf(file_name,"P22,");
    32897:  180:            return(error_or_eof_case(tstream_ptr, token_ptr,cu_state,token_str,token_ind,ch));
   140292:  181:        } else if (next_st == -2) 
        -:  182:        {
     2528:  183:            fprintf(file_name,"P23,");
     2528:  184:            return(numeric_case(tstream_ptr,token_ptr,ch, token_str,token_ind));
   137764:  185:        } else if (next_st == -3) 
        -:  186:        {
     8440:  187:            fprintf(file_name,"P24,");
     8440:  188:            token_ptr->token_id=IDENTIFIER;
     8440:  189:            unget_char(ch,tstream_ptr->ch_stream);
     8440:  190:            token_ind--;
     8440:  191:            get_actual_token(token_str,token_ind);
     8440:  192:            strcpy(token_ptr->token_string,token_str);
     8440:  193:            return(token_ptr);
        -:  194:        } 
        -:  195:        
   129324:  196:        switch(next_st) 
        -:  197:        { 
   116589:  198:            default : fprintf(file_name,"P25,"); break;
     2218:  199:            case 6  : /* These are all KEYWORD cases. */
        -:  200:            case 9  :
        -:  201:            case 11 :
        -:  202:            case 13 :
     2218:  203:            case 16 : fprintf(file_name,"P26,");
     2218:  204:                    ch=get_char(tstream_ptr->ch_stream);
     2218:  205:                    if(check_delimiter(ch)==TRUE)
        -:  206:                    {
     2179:  207:                        fprintf(file_name,"P27,");
     2179:  208:                        token_ptr->token_id=keyword(next_st);
     2179:  209:                        unget_char(ch,tstream_ptr->ch_stream);
     2179:  210:                        token_ptr->token_string[0]='\0';
     2179:  211:                        return(token_ptr);
        -:  212:                    }
       39:  213:                    fprintf(file_name,"P28,");
        -:  214:                    /*unget_char(ch,tstream_ptr->ch_stream);*/
       39:  215:                    break;
     5031:  216:            case 19 : /* These are all special SPECIAL character */
        -:  217:            case 20 : /* cases */
        -:  218:            case 21 :
        -:  219:            case 22 :
        -:  220:            case 23 :
        -:  221:            case 24 :
        -:  222:            case 25 :
     5031:  223:            case 32 : fprintf(file_name,"P29,");
     5031:  224:                    token_ptr->token_id=special(next_st);
     5031:  225:                    token_ptr->token_string[0]='\0';
     5031:  226:                    return(token_ptr);
     3593:  227:            case 27 : /* These are constant cases */
     3593:  228:            case 29 :fprintf(file_name,"P30,");
     3593:  229:                    token_ptr->token_id=constant(next_st,token_str,token_ind);
     3593:  230:                    get_actual_token(token_str,token_ind);
     3593:  231:                    strcpy(token_ptr->token_string,token_str);
     3593:  232:                    return(token_ptr);
     1893:  233:            case 30 :  /* This is COMMENT case */
     1893:  234:                    fprintf(file_name,"P31,");
     1893:  235:                    skip(tstream_ptr->ch_stream);
     1893:  236:                    token_ind=next_st=0;
     1893:  237:                    break;
        -:  238:        }
   118521:  239:        fprintf(file_name,"P32,");
   118521:  240:        cu_state=next_st;
   118521:  241:        ch=get_char(tstream_ptr->ch_stream);
        -:  242:    }
    #####:  243:}
        -:  244:
     2528:  245:static token numeric_case(tstream_ptr,token_ptr,ch,token_str,token_ind)
        -:  246:token_stream tstream_ptr;
        -:  247:token token_ptr;
        -:  248:char ch,token_str[];
        -:  249:int token_ind;
        -:  250:{
     2528:  251:    if(check_delimiter(ch)!=TRUE)
        -:  252:    {   /* Error case */
      613:  253:        fprintf(file_name,"P33,");
      613:  254:        token_ptr->token_id=ERROR;
     2521:  255:        while(check_delimiter(ch)==FALSE)
        -:  256:        {
     1908:  257:            if(token_ind >= 80)
        -:  258:            {
    #####:  259:                fprintf(file_name,"P34,");
    #####:  260:                break;
        -:  261:            }
     1908:  262:            fprintf(file_name,"P35,");  
     1908:  263:            token_str[token_ind++]=ch=get_char(tstream_ptr->ch_stream);
        -:  264:        }
      613:  265:        fprintf(file_name,"P36,");
      613:  266:        unget_char(ch,tstream_ptr->ch_stream);
      613:  267:        token_ind--;
      613:  268:        get_actual_token(token_str,token_ind);
      613:  269:        strcpy(token_ptr->token_string,token_str);
      613:  270:        return(token_ptr);
        -:  271:    }
     1915:  272:    fprintf(file_name,"P37,");
     1915:  273:    token_ptr->token_id=NUMERIC; /* Numeric case */
     1915:  274:    unget_char(ch,tstream_ptr->ch_stream);
     1915:  275:    token_ind--;
     1915:  276:    get_actual_token(token_str,token_ind);
     1915:  277:    strcpy(token_ptr->token_string,token_str);
     1915:  278:    return(token_ptr);
        -:  279:}
        -:  280:
    11126:  281:static token error_or_eof_case(tstream_ptr,token_ptr,cu_state,token_str,token_ind,ch)
        -:  282:token_stream tstream_ptr;
        -:  283:token token_ptr;
        -:  284:int cu_state,token_ind;
        -:  285:char token_str[],ch;
        -:  286:{
        -:  287:    
    11126:  288:    if(is_end_of_character_stream(tstream_ptr->ch_stream)) 
        -:  289:    {
     4070:  290:        fprintf(file_name,"P38,");
     4070:  291:        token_ptr->token_id = EOTSTREAM;
     4070:  292:        token_ptr->token_string[0]='\0';
     4070:  293:        return(token_ptr);
        -:  294:    }
     7056:  295:    if(cu_state !=0)
        -:  296:    {
      935:  297:        fprintf(file_name,"P39,");
      935:  298:        unget_char(ch,tstream_ptr->ch_stream);
      935:  299:        token_ind--;
        -:  300:    }
     7056:  301:    fprintf(file_name,"P40,");
     7056:  302:    token_ptr->token_id=ERROR;
     7056:  303:    get_actual_token(token_str,token_ind);
     7056:  304:    strcpy(token_ptr->token_string,token_str);
     7056:  305:    return(token_ptr);                
        -:  306:}
        -:  307:
     7267:  308:static int check_delimiter(ch)
        -:  309:char ch;
        -:  310:{
     7267:  311:    if(!isalpha(ch) && !isdigit(ch))
        -:  312:    {
     4707:  313:        fprintf(file_name,"P41,");
     4707:  314:        return(TRUE);
        -:  315:    }
     2560:  316:    fprintf(file_name,"P42,");
     2560:  317:    return(FALSE);
        -:  318:}
        -:  319:
     2179:  320:static int keyword(state)
        -:  321:int state;
        -:  322:{
     2179:  323:    switch(state)
        -:  324:    {   /* Return the respective macro for the Keyword. */
      451:  325:        case 6 : fprintf(file_name,"P43,"); return(LAMBDA);
      446:  326:        case 9 : fprintf(file_name,"P44,"); return(AND);
      429:  327:        case 11: fprintf(file_name,"P45,"); return(OR);
      407:  328:        case 13: fprintf(file_name,"P46,"); return(IF);
      446:  329:        case 16: fprintf(file_name,"P47,"); return(XOR);
    #####:  330:        default: fprintf(file_name,"P48,"); fprintf(stdout, "error\n");break;
        -:  331:    }
    #####:  332:    fprintf(file_name,"P49,");
    #####:  333:    fclose(file_name);
    #####:  334:    exit(0);
        -:  335:}
        -:  336:
     5031:  337:static int special(state)
        -:  338:int state;
        -:  339:{
     5031:  340:    switch(state)
        -:  341:    {   /* return the respective macro for the special character. */
      606:  342:        case 19: fprintf(file_name,"P50,"); return(LPAREN);
      652:  343:        case 20: fprintf(file_name,"P51,"); return(RPAREN);
      653:  344:        case 21: fprintf(file_name,"P52,"); return(LSQUARE);
      671:  345:        case 22: fprintf(file_name,"P53,"); return(RSQUARE);
      660:  346:        case 23: fprintf(file_name,"P54,"); return(QUOTE);
      654:  347:        case 24: fprintf(file_name,"P55,"); return(BQUOTE);
      633:  348:        case 25: fprintf(file_name,"P56,"); return(COMMA);
      502:  349:        case 32: fprintf(file_name,"P57,"); return(EQUALGREATER);
    #####:  350:        default: fprintf(file_name,"P58,");fprintf(stdout, "error\n");break;
        -:  351:    }
    #####:  352:    fprintf(file_name,"P59,");
    #####:  353:    fclose(file_name);
    #####:  354:    exit(0);
        -:  355:}
        -:  356:
     1893:  357:static skip(stream_ptr)
        -:  358:character_stream stream_ptr;
        -:  359:{
        -:  360:    char c;
    19550:  361:    while((c=get_char(stream_ptr))!='\n' && !is_end_of_character_stream(stream_ptr)) /* Skip the characters until EOF or EOL found. */
        -:  362:    {
    17657:  363:        fprintf(file_name,"P60,");
        -:  364:    }
     1893:  365:	if(c==EOF){
       40:  366:        fprintf(file_name,"P61,");
       40:  367:        unget_char(c, stream_ptr); /* Put back to leave gracefully - hf */
        -:  368:    }
     1893:  369:    fprintf(file_name,"P62,");
     1893:  370:    return;
        -:  371:}
        -:  372:
     3593:  373:static int constant(state,token_str,token_ind)
        -:  374:int state,token_ind;
        -:  375:char token_str[];
        -:  376:{
     3593:  377:    switch(state)
        -:  378:    {   /* Return the respective CONSTANT macro. */
     1691:  379:        case 27 : fprintf(file_name,"P63,"); return(STRING_CONSTANT);
     1902:  380:        case 29 : fprintf(file_name,"P64,"); token_str[token_ind-2]=' '; return(CHARACTER_CONSTANT);
    #####:  381:        default : fprintf(file_name,"P65,"); break;
        -:  382:    }
    #####:  383:}
        -:  384:              
   234959:  385:static int next_state(state,ch)
        -:  386:int state;
        -:  387:char ch;
        -:  388:{
   234959:  389:    if(state < 0)
        -:  390:    {
    22057:  391:        fprintf(file_name,"P66,");
    22057:  392:        return(state);
        -:  393:    }
        -:  394:      
   212902:  395:    if(base[state]+ch >= 0)
        -:  396:    {
   201958:  397:        if(check[base[state]+ch] == state) /* Check for the right state */
        -:  398:        {
   129324:  399:            fprintf(file_name,"P67,");
   129324:  400:            return(next[base[state]+ch]);
        -:  401:        }   
        -:  402:        else
        -:  403:        {
    72634:  404:            fprintf(file_name,"P68,");
    72634:  405:            return(next_state(default1[state],ch));
        -:  406:        }
        -:  407:    }
        -:  408:    else
        -:  409:    {
    10944:  410:        fprintf(file_name,"P69,");
    10944:  411:        return(next_state(default1[state],ch));
        -:  412:    }
        -:  413:}
        -:  414:
    32897:  415:BOOLEAN is_eof_token(t)
        -:  416:token t;
        -:  417:{
    32897:  418:    if(t->token_id==EOTSTREAM)
        -:  419:    {
     4070:  420:        fprintf(file_name,"P70,");
     4070:  421:        return(TRUE);
        -:  422:    }
    28827:  423:    fprintf(file_name,"P71,");    
    28827:  424:    return(FALSE);
        -:  425:}
        -:  426:
    32897:  427:BOOLEAN print_token(token_ptr)
        -:  428:token token_ptr;
        -:  429:{
    32897:  430:     switch(token_ptr->token_id)
        -:  431:     {    /* Print the respective tokens. */
     7669:  432:          case ERROR : fprintf(file_name,"P72,"); fprintf(stdout, "error,\t\"");fprintf(stdout, "%s",token_ptr->token_string);
     7669:  433:                       fprintf(stdout, "\".\n");return(TRUE);
     4070:  434:          case EOTSTREAM : fprintf(file_name,"P73,"); fprintf(stdout, "eof.\n");return(TRUE);
      451:  435:          case 6 : fprintf(file_name,"P74,"); fprintf(stdout, "keyword,\t\"lambda\".\n");return(TRUE);
      446:  436:          case 9 : fprintf(file_name,"P75,"); fprintf(stdout, "keyword,\t\"and\".\n");return(TRUE);
      429:  437:          case 11: fprintf(file_name,"P76,"); fprintf(stdout, "keyword,\t\"or\".\n");return(TRUE);
      407:  438:          case 13: fprintf(file_name,"P78,"); fprintf(stdout, "keyword,\t\"if\".\n");return(TRUE);
      446:  439:          case 16: fprintf(file_name,"P79,"); fprintf(stdout, "keyword,\t\"xor\".\n");return(TRUE);
     8440:  440:          case 17: fprintf(file_name,"P80,"); fprintf(stdout, "identifier,\t\"");fprintf(stdout, "%s",token_ptr->token_string);
     8440:  441:                   fprintf(stdout, "\".\n");return(TRUE);
     1915:  442:          case 18: fprintf(file_name,"P81,"); fprintf(stdout, "numeric,\t");fprintf(stdout, "%s",token_ptr->token_string);
     1915:  443:                   fprintf(stdout, ".\n");return(TRUE);
      606:  444:          case 19: fprintf(file_name,"P82,"); fprintf(stdout, "lparen.\n");return(TRUE);
      652:  445:          case 20: fprintf(file_name,"P83,"); fprintf(stdout, "rparen.\n");return(TRUE);
      653:  446:          case 21: fprintf(file_name,"P84,"); fprintf(stdout, "lsquare.\n");return(TRUE);
      671:  447:          case 22: fprintf(file_name,"P85,"); fprintf(stdout, "rsquare.\n");return(TRUE);
      660:  448:          case 23: fprintf(file_name,"P86,"); fprintf(stdout, "quote.\n");return(TRUE);
      654:  449:          case 24: fprintf(file_name,"P87,"); fprintf(stdout, "bquote.\n");return(TRUE);
      633:  450:          case 25: fprintf(file_name,"P88,"); fprintf(stdout, "comma.\n");return(TRUE);
     1691:  451:          case 27: fprintf(file_name,"P89,"); fprintf(stdout, "string,\t");fprintf(stdout, "%s",token_ptr->token_string);
     1691:  452:                   fprintf(stdout, ".\n");return(TRUE);
     1902:  453:          case 29: fprintf(file_name,"P90,"); fprintf(stdout, "character,\t\"");fprintf(stdout, "%s",token_ptr->token_string);
     1902:  454:                   fprintf(stdout, "\".\n");return(TRUE);
      502:  455:          case 32: fprintf(file_name,"P91,"); fprintf(stdout, "keyword,\t\"=>\".\n");return(TRUE);
    #####:  456:          default: fprintf(file_name,"P92,");break;
        -:  457:      }
    #####:  458:      fprintf(file_name,"P93,");
    #####:  459:      return(FALSE);
        -:  460:}
        -:  461:
    21617:  462:static get_actual_token(token_str,token_ind)
        -:  463:int token_ind;
        -:  464:char token_str[];
        -:  465:{
    21617:  466:    fprintf(file_name,"P94,");
        -:  467:    int ind,start;
    24154:  468:    for(ind=token_ind;ind>0 && isspace(token_str[ind-1]);--ind){
     2537:  469:        fprintf(file_name,"P95,");
        -:  470:    }
    21617:  471:    fprintf(file_name,"P96,");
    21617:  472:    token_str[ind]='\0';token_ind=ind;
    36386:  473:    for(ind=0;ind<token_ind;++ind)
        -:  474:    {
    36332:  475:        fprintf(file_name,"P97,");
    36332:  476:        if(!isspace(token_str[ind]))
        -:  477:        {
    21563:  478:            fprintf(file_name,"P98,");
    21563:  479:            break;
        -:  480:        }
        -:  481:    }
        -:  482:        
        -:  483:                
   123297:  484:    for(start=0;ind<=token_ind;++start,++ind)
        -:  485:    {
   101680:  486:        fprintf(file_name,"P99,");
   101680:  487:        token_str[start]=token_str[ind];
        -:  488:    }
    21617:  489:    fprintf(file_name,"P100,");
    21617:  490:    return;
        -:  491:}
