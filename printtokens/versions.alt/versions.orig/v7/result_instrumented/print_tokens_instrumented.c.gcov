        -:    0:Source:print_tokens_instrumented.c
        -:    0:Graph:print_tokens_instrumented.gcno
        -:    0:Data:print_tokens_instrumented.gcda
        -:    0:Runs:4130
        -:    1:
        -:    2:
        -:    3:# include <ctype.h>
        -:    4:
        -:    5:# define START  5
        -:    6:# define TRUE  1
        -:    7:# define FALSE 0
        -:    8:
        -:    9:typedef int BOOLEAN;
        -:   10:typedef char *string;
        -:   11:
        -:   12:# include <stdio.h>
        -:   13:# include "tokens.h"
        -:   14:
        -:   15:static token numeric_case();
        -:   16:static token error_or_eof_case();
        -:   17:static int check_delimiter();
        -:   18:static int keyword(int state);
        -:   19:static int special(int state);
        -:   20:static skip(character_stream stream_ptr);
        -:   21:static int constant(int state,char token_str[],int token_ind);
        -:   22:static int next_state();
        -:   23:static get_actual_token(char token_str[],int token_ind);
        -:   24:
        -:   25:FILE* file_name = NULL;
        -:   26:
        -:   27:
     4130:   28:main(argc,argv)
        -:   29:int argc;
        -:   30:char *argv[];
        -:   31:{   
     4130:   32:    file_name=fopen("v7.txt","a+"); 
     4130:   33:    if(!file_name)
        -:   34:    {	
    #####:   35:        printf("File could not be opened! \n");
    #####:   36:        fclose(file_name);
    #####:   37:        exit(0);
        -:   38:    }
        -:   39:	
        -:   40:    token token_ptr;
        -:   41:    token_stream stream_ptr;
     4130:   42:    fprintf(file_name,"\nP1,");
     4130:   43:    if(argc>2)
        -:   44:    {
       30:   45:        fprintf(file_name,"P2,");
       30:   46:        fprintf(stdout, "The format is print_tokens filename(optional)\n");
       30:   47:        fclose(file_name);
       30:   48:        exit(1);
        -:   49:    }
        -:   50:    
     4100:   51:    stream_ptr=open_token_stream(argv[1]);
     4070:   52:    fprintf(file_name,"P3,");
    32932:   53:    while(!is_eof_token((token_ptr=get_token(stream_ptr))))
        -:   54:    {
    28862:   55:        fprintf(file_name,"P4,");
    28862:   56:        print_token(token_ptr);
        -:   57:    }
        -:   58:            
     4070:   59:    fprintf(file_name,"P5,");
     4070:   60:    print_token(token_ptr);
     4070:   61:    fclose(file_name);
     4070:   62:    exit(0);
        -:   63:}
        -:   64:
     4100:   65:character_stream open_character_stream(FILENAME)
        -:   66:string FILENAME;
        -:   67:{
        -:   68:    character_stream stream_ptr;
     4100:   69:    stream_ptr=(character_stream)malloc(sizeof(struct stream_type));
     4100:   70:    stream_ptr->stream_ind=START;
     4100:   71:    stream_ptr->stream[START]='\0';
     4100:   72:    fprintf(file_name,"P6,");
     4100:   73:    if(FILENAME == NULL)
        -:   74:    {
     2963:   75:        fprintf(file_name,"P7,");
     2963:   76:        stream_ptr->fp=stdin;
        -:   77:    }
     1137:   78:    else if((stream_ptr->fp=fopen(FILENAME,"r"))==NULL)
        -:   79:    {
       30:   80:        fprintf(file_name,"P8,");
       30:   81:        fprintf(stdout, "The file %s doesn't exists\n",FILENAME);
       30:   82:        fclose(file_name);
       30:   83:        exit(0);
        -:   84:    }
     4070:   85:    fprintf(file_name,"P9,");
     4070:   86:    return(stream_ptr);
        -:   87:}
        -:   88:
   175168:   89:CHARACTER get_char(stream_ptr)
        -:   90:character_stream stream_ptr;
        -:   91:{
   175168:   92:    fprintf(file_name,"P10,");
   175168:   93:    if(stream_ptr->stream[stream_ptr->stream_ind] == '\0')
        -:   94:    {
    12791:   95:        fprintf(file_name,"P11,");
    12791:   96:        if(fgets(stream_ptr->stream+START,80-START,stream_ptr->fp) == NULL)/* Fix bug: add -START - hf*/
        -:   97:        {
     4070:   98:            fprintf(file_name,"P12,");
     4070:   99:            stream_ptr->stream[START]=EOF;
        -:  100:        }
    12791:  101:        fprintf(file_name,"P13,");
    12791:  102:        stream_ptr->stream_ind=START;
        -:  103:    }
   175168:  104:    fprintf(file_name,"P14,");
   175168:  105:    return(stream_ptr->stream[(stream_ptr->stream_ind)++]);
        -:  106:}
        -:  107:
    28823:  108:BOOLEAN is_end_of_character_stream(stream_ptr)
        -:  109:character_stream stream_ptr;
        -:  110:{
    28823:  111:    fprintf(file_name,"P15,");
    28823:  112:    if(stream_ptr->stream[stream_ptr->stream_ind-1] == EOF)
        -:  113:	{
     4110:  114:        fprintf(file_name,"P16,");
     4110:  115:        return(TRUE);
        -:  116:    } 
        -:  117:    else
        -:  118:    {
    24713:  119:        fprintf(file_name,"P17,");
    24713:  120:        return(FALSE);
        -:  121:    }
        -:  122:        
        -:  123:}
        -:  124:
    14196:  125:unget_char(ch,stream_ptr)
        -:  126:CHARACTER ch;
        -:  127:character_stream stream_ptr;
        -:  128:{
    14196:  129:    fprintf(file_name,"P18,");
    14196:  130:    if(stream_ptr->stream_ind == 0)
        -:  131:	{
    #####:  132:        fprintf(file_name,"P19,");
    #####:  133:        return;
        -:  134:    }
        -:  135:    else
        -:  136:	{
    14196:  137:        fprintf(file_name,"P20,");
    14196:  138:        stream_ptr->stream[--(stream_ptr->stream_ind)]=ch;
        -:  139:    }
    14196:  140:    fprintf(file_name,"P21,");  
    14196:  141:    return;
        -:  142:}
        -:  143:
     4100:  144:token_stream open_token_stream(FILENAME)
        -:  145:string FILENAME;
        -:  146:{
     4100:  147:    fprintf(file_name,"P22,");  
        -:  148:    token_stream token_ptr;
     4100:  149:    token_ptr=(token_stream)malloc(sizeof(struct token_stream_type));
     4100:  150:    token_ptr->ch_stream=open_character_stream(FILENAME);
     4070:  151:    return(token_ptr);
        -:  152:}
        -:  153:
    32932:  154:token get_token(tstream_ptr)
        -:  155:token_stream tstream_ptr;
        -:  156:{
        -:  157:    char token_str[80]; /* This buffer stores the current token */
        -:  158:    int token_ind;      /* Index to the token_str  */
        -:  159:    token token_ptr;
        -:  160:    CHARACTER ch;
        -:  161:    int cu_state,next_st,token_found;
    32932:  162:    token_ptr=(token)(malloc(sizeof(struct token_type)));
    32932:  163:    ch=get_char(tstream_ptr->ch_stream);
    32932:  164:    cu_state=token_ind=token_found=0;
    32932:  165:    fprintf(file_name,"P23,");  
   151628:  166:    while(!token_found)
        -:  167:    {
   151628:  168:        fprintf(file_name,"P24,");
   151628:  169:        if(token_ind < 80) /* ADDED ERROR CHECK - hf */
        -:  170:        {
   151591:  171:            fprintf(file_name,"P25,");
   151591:  172:            token_str[token_ind++]=ch;
   151591:  173:            next_st=next_state(cu_state,ch);
        -:  174:        }
        -:  175:        else
        -:  176:        {
       37:  177:            fprintf(file_name,"P26,");
       37:  178:            next_st = -1; /* - hf */
        -:  179:        }
   151628:  180:        if (next_st == -1) 
        -:  181:        {
    11126:  182:            fprintf(file_name,"P27,");
    32932:  183:            return(error_or_eof_case(tstream_ptr, token_ptr,cu_state,token_str,token_ind,ch));
        -:  184:        } 
   140502:  185:        else if (next_st == -2) 
        -:  186:        {
     2542:  187:            fprintf(file_name,"P28,");
     2542:  188:            return(numeric_case(tstream_ptr,token_ptr,ch, token_str,token_ind));
        -:  189:        } 
   137960:  190:        else if (next_st == -3) 
        -:  191:        {
     8461:  192:            fprintf(file_name,"P29,");
     8461:  193:            token_ptr->token_id=IDENTIFIER;
     8461:  194:            unget_char(ch,tstream_ptr->ch_stream);
     8461:  195:            token_ind--;
     8461:  196:            get_actual_token(token_str,token_ind);
     8461:  197:            strcpy(token_ptr->token_string,token_str);
     8461:  198:            return(token_ptr);
        -:  199:        } 
        -:  200:
   129499:  201:        fprintf(file_name,"P30,");  
   129499:  202:        switch(next_st) 
        -:  203:        { 
   116764:  204:            default : 
   116764:  205:                fprintf(file_name,"P31,"); 
   116764:  206:                break;
     2218:  207:            case 6  : /* These are all KEYWORD cases. */
        -:  208:            case 9  :
        -:  209:            case 11 :
        -:  210:            case 13 :
        -:  211:            
        -:  212:			case 16 :
     2218:  213:                ch=get_char(tstream_ptr->ch_stream);
     2218:  214:                fprintf(file_name,"P32,");
     2218:  215:                if(check_delimiter(ch)==TRUE)
        -:  216:                {
     2179:  217:                    fprintf(file_name,"P33,");
     2179:  218:                    token_ptr->token_id=keyword(next_st);
     2179:  219:                    unget_char(ch,tstream_ptr->ch_stream);
     2179:  220:                    token_ptr->token_string[0]='\0';
     2179:  221:                    return(token_ptr);
        -:  222:                }
       39:  223:                fprintf(file_name,"P34,");
       39:  224:                unget_char(ch,tstream_ptr->ch_stream);
       39:  225:                break;
     5031:  226:            case 19 : /* These are all special SPECIAL character */
        -:  227:            case 20 : /* cases */
        -:  228:            case 21 :
        -:  229:            case 22 :
        -:  230:            case 23 :
        -:  231:            case 24 :
        -:  232:            case 25 :
        -:  233:            case 32 : 
     5031:  234:                fprintf(file_name,"P35,");
     5031:  235:                token_ptr->token_id=special(next_st);
     5031:  236:                token_ptr->token_string[0]='\0';
     5031:  237:                return(token_ptr);
     3593:  238:            case 27 : /* These are constant cases */
        -:  239:            case 29 :
     3593:  240:                fprintf(file_name,"P36,");
     3593:  241:                token_ptr->token_id=constant(next_st,token_str,token_ind);
     3593:  242:                get_actual_token(token_str,token_ind);
     3593:  243:                strcpy(token_ptr->token_string,token_str);
     3593:  244:                return(token_ptr);
     1893:  245:            case 30 :  /* This is COMMENT case */
     1893:  246:                fprintf(file_name,"P37,");
     1893:  247:                skip(tstream_ptr->ch_stream);
     1893:  248:                token_ind=next_st=0;
     1893:  249:                break;
        -:  250:        }
   118696:  251:        fprintf(file_name,"P38,");
   118696:  252:        cu_state=next_st;
   118696:  253:        ch=get_char(tstream_ptr->ch_stream);
        -:  254:    }
    #####:  255:}
        -:  256:
     2542:  257:static token numeric_case(tstream_ptr,token_ptr,ch,token_str,token_ind)
        -:  258:token_stream tstream_ptr;
        -:  259:token token_ptr;
        -:  260:char ch,token_str[];
        -:  261:int token_ind;
        -:  262:{
     2542:  263:    fprintf(file_name,"P39,");
     2542:  264:    if(check_delimiter(ch)!=TRUE)
        -:  265:    {   /* Error case */
      623:  266:        token_ptr->token_id=ERROR;
      623:  267:        fprintf(file_name,"P40,");
     2395:  268:        while(check_delimiter(ch)==FALSE)
        -:  269:        {
     1807:  270:            fprintf(file_name,"P41,");
     1807:  271:            if(token_ind >= 10)
        -:  272:            {
       35:  273:                fprintf(file_name,"P42,");
       35:  274:                break;
        -:  275:            }
     1772:  276:            fprintf(file_name,"P43,");  
     1772:  277:            token_str[token_ind++]=ch=get_char(tstream_ptr->ch_stream);
        -:  278:        }
      623:  279:        fprintf(file_name,"P44,");
      623:  280:        unget_char(ch,tstream_ptr->ch_stream);
      623:  281:        token_ind--;
      623:  282:        get_actual_token(token_str,token_ind);
      623:  283:        strcpy(token_ptr->token_string,token_str);
      623:  284:        return(token_ptr);
        -:  285:    }
     1919:  286:    fprintf(file_name,"P45,");
     1919:  287:    token_ptr->token_id=NUMERIC; /* Numeric case */
     1919:  288:    unget_char(ch,tstream_ptr->ch_stream);
     1919:  289:    token_ind--;
     1919:  290:    get_actual_token(token_str,token_ind);
     1919:  291:    strcpy(token_ptr->token_string,token_str);
     1919:  292:    return(token_ptr);
        -:  293:}
        -:  294:
    11126:  295:static token error_or_eof_case(tstream_ptr,token_ptr,cu_state,token_str,token_ind,ch)
        -:  296:token_stream tstream_ptr;
        -:  297:token token_ptr;
        -:  298:int cu_state,token_ind;
        -:  299:char token_str[],ch;
        -:  300:{
    11126:  301:    fprintf(file_name,"P46,");
    11126:  302:    if(is_end_of_character_stream(tstream_ptr->ch_stream)) 
        -:  303:    {
     4070:  304:        fprintf(file_name,"P47,");
     4070:  305:        token_ptr->token_id = EOTSTREAM;
     4070:  306:        token_ptr->token_string[0]='\0';
     4070:  307:        return(token_ptr);
        -:  308:    }
     7056:  309:    fprintf(file_name,"P48,");
     7056:  310:    if(cu_state !=0)
        -:  311:    {
      935:  312:        fprintf(file_name,"P49,");
      935:  313:        unget_char(ch,tstream_ptr->ch_stream);
      935:  314:        token_ind--;
        -:  315:    }
     7056:  316:    fprintf(file_name,"P50,");
     7056:  317:    token_ptr->token_id=ERROR;
     7056:  318:    get_actual_token(token_str,token_ind);
     7056:  319:    strcpy(token_ptr->token_string,token_str);
     7056:  320:    return(token_ptr);                
        -:  321:}
        -:  322:
     7155:  323:static int check_delimiter(ch)
        -:  324:char ch;
        -:  325:{
     7155:  326:    fprintf(file_name,"P51,");
     7155:  327:    if(!isalpha(ch) && !isdigit(ch))
        -:  328:    {
     4686:  329:        fprintf(file_name,"P52,");
     4686:  330:        return(TRUE);
        -:  331:    }
     2469:  332:    fprintf(file_name,"P53,");
     2469:  333:    return(FALSE);
        -:  334:}
        -:  335:
     2179:  336:static int keyword(state)
        -:  337:int state;
        -:  338:{
     2179:  339:    fprintf(file_name,"P54,"); 
     2179:  340:    switch(state)
        -:  341:    {   /* Return the respective macro for the Keyword. */
      451:  342:        case 6 : 
      451:  343:            fprintf(file_name,"P55,"); 
      451:  344:            return(LAMBDA);
      446:  345:        case 9 : 
      446:  346:            fprintf(file_name,"P56,"); 
      446:  347:            return(AND);
      429:  348:        case 11:   
      429:  349:            fprintf(file_name,"P57,"); 
      429:  350:            return(OR);
      407:  351:        case 13: 
      407:  352:            fprintf(file_name,"P58,"); 
      407:  353:            return(IF);
      446:  354:        case 16:   
      446:  355:            fprintf(file_name,"P59,"); 
      446:  356:            return(XOR);
    #####:  357:        default: 
    #####:  358:            fprintf(file_name,"P60,"); 
    #####:  359:            fprintf(stdout, "error\n");break;
        -:  360:    }
    #####:  361:    fprintf(file_name,"P61,");
    #####:  362:    fclose(file_name);
    #####:  363:    exit(0);
        -:  364:}
        -:  365:
     5031:  366:static int special(state)
        -:  367:int state;
        -:  368:{
     5031:  369:    fprintf(file_name,"P62,"); 
     5031:  370:    switch(state)
        -:  371:    {   /* return the respective macro for the special character. */
      606:  372:        case 19: 
      606:  373:            fprintf(file_name,"P63,"); 
      606:  374:            return(LPAREN);
      652:  375:        case 20: 
      652:  376:            fprintf(file_name,"P64,"); 
      652:  377:            return(RPAREN);
      653:  378:        case 21: 
      653:  379:            fprintf(file_name,"P65,"); 
      653:  380:            return(LSQUARE);
      671:  381:        case 22: 
      671:  382:            fprintf(file_name,"P66,"); 
      671:  383:            return(RSQUARE);
      660:  384:        case 23: 
      660:  385:            fprintf(file_name,"P67,"); 
      660:  386:            return(QUOTE);
      654:  387:        case 24: 
      654:  388:            fprintf(file_name,"P68,"); 
      654:  389:            return(BQUOTE);
      633:  390:        case 25: 
      633:  391:            fprintf(file_name,"P69,"); 
      633:  392:            return(COMMA);
      502:  393:        case 32: 
      502:  394:            fprintf(file_name,"P70,"); 
      502:  395:            return(EQUALGREATER);
    #####:  396:        default: 
    #####:  397:            fprintf(file_name,"P71,");
    #####:  398:            fprintf(stdout, "error\n");break;
        -:  399:    }
    #####:  400:    fprintf(file_name,"P72,");
    #####:  401:    fclose(file_name);
    #####:  402:    exit(0);
        -:  403:}
        -:  404:
     1893:  405:static skip(stream_ptr)
        -:  406:character_stream stream_ptr;
        -:  407:{
        -:  408:    char c;
     1893:  409:    fprintf(file_name,"P73,"); 
    19550:  410:    while((c=get_char(stream_ptr))!='\n' && !is_end_of_character_stream(stream_ptr));
        -:  411:
     1893:  412:    fprintf(file_name,"P74,"); 
     1893:  413:	if(c==EOF)
        -:  414:    {
       40:  415:        fprintf(file_name,"P75,");
       40:  416:        unget_char(c, stream_ptr); /* Put back to leave gracefully - hf */
        -:  417:    }
     1893:  418:    fprintf(file_name,"P76,");
     1893:  419:    return;
        -:  420:}
        -:  421:
     3593:  422:static int constant(state,token_str,token_ind)
        -:  423:int state,token_ind;
        -:  424:char token_str[];
        -:  425:{
     3593:  426:    fprintf(file_name,"P77,"); 
     3593:  427:    switch(state)
        -:  428:    {   /* Return the respective CONSTANT macro. */
     1691:  429:        case 27 : 
     1691:  430:            fprintf(file_name,"P78,"); 
     1691:  431:            return(STRING_CONSTANT);
     1902:  432:        case 29 : 
     1902:  433:            fprintf(file_name,"P79,"); 
     1902:  434:            token_str[token_ind-2]=' '; 
     1902:  435:            return(CHARACTER_CONSTANT);
    #####:  436:        default : 
    #####:  437:            fprintf(file_name,"P80,");
    #####:  438:            break;
        -:  439:    }
    #####:  440:}
        -:  441:              
   235379:  442:static int next_state(state,ch)
        -:  443:int state;
        -:  444:char ch;
        -:  445:{
   235379:  446:    fprintf(file_name,"P81,"); 
   235379:  447:    if(state < 0)
        -:  448:    {
    22092:  449:        fprintf(file_name,"P82,");
    22092:  450:        return(state);
        -:  451:    }
        -:  452:    
   213287:  453:    fprintf(file_name,"P83,"); 
   213287:  454:    if(base[state]+ch >= 0)
        -:  455:    {
   202347:  456:        fprintf(file_name,"P84,"); 
   202347:  457:        if(check[base[state]+ch] == state) /* Check for the right state */
        -:  458:        {
   129499:  459:            fprintf(file_name,"P85,");
   129499:  460:            return(next[base[state]+ch]);
        -:  461:        }   
        -:  462:        else
        -:  463:        {
    72848:  464:            fprintf(file_name,"P86,");
    72848:  465:            return(next_state(default1[state],ch));
        -:  466:        }
        -:  467:    }
        -:  468:    else
        -:  469:    {
    10940:  470:        fprintf(file_name,"P87,");
    10940:  471:        return(next_state(default1[state],ch));
        -:  472:    }
        -:  473:}
        -:  474:
    32932:  475:BOOLEAN is_eof_token(t)
        -:  476:token t;
        -:  477:{
    32932:  478:    fprintf(file_name,"P88,"); 
    32932:  479:    if(t->token_id==EOTSTREAM)
        -:  480:    {
     4070:  481:        fprintf(file_name,"P89,");
     4070:  482:        return(TRUE);
        -:  483:    }
    28862:  484:    fprintf(file_name,"P90,");    
    28862:  485:    return(FALSE);
        -:  486:}
        -:  487:
    32932:  488:BOOLEAN print_token(token_ptr)
        -:  489:token token_ptr;
        -:  490:{
    32932:  491:    fprintf(file_name,"P91,"); 
    32932:  492:    switch(token_ptr->token_id)
        -:  493:    {    /* Print the respective tokens. */
     7679:  494:        case ERROR : 
     7679:  495:            fprintf(file_name,"P92,"); 
     7679:  496:            fprintf(stdout, "error,\t\"");
     7679:  497:            fprintf(stdout, "%s",token_ptr->token_string);
     7679:  498:            fprintf(stdout, "\".\n");
     7679:  499:            return(TRUE);
        -:  500:
     4070:  501:        case EOTSTREAM : 
     4070:  502:            fprintf(file_name,"P93,"); 
     4070:  503:            fprintf(stdout, "eof.\n");
     4070:  504:            return(TRUE);
        -:  505:
      451:  506:        case 6 : 
      451:  507:            fprintf(file_name,"P94,"); 
      451:  508:            fprintf(stdout, "keyword,\t\"lambda\".\n");
      451:  509:            return(TRUE);
        -:  510:
      446:  511:        case 9 : 
      446:  512:            fprintf(file_name,"P95,"); 
      446:  513:            fprintf(stdout, "keyword,\t\"and\".\n");
      446:  514:            return(TRUE);
        -:  515:
      429:  516:        case 11: 
      429:  517:            fprintf(file_name,"P96,"); 
      429:  518:            fprintf(stdout, "keyword,\t\"or\".\n");
      429:  519:            return(TRUE);
        -:  520:
      407:  521:        case 13: 
      407:  522:            fprintf(file_name,"P97,"); 
      407:  523:            fprintf(stdout, "keyword,\t\"if\".\n");
      407:  524:            return(TRUE);
        -:  525:
      446:  526:        case 16: 
      446:  527:            fprintf(file_name,"P98,"); 
      446:  528:            fprintf(stdout, "keyword,\t\"xor\".\n");
      446:  529:            return(TRUE);
        -:  530:
     8461:  531:        case 17: 
     8461:  532:            fprintf(file_name,"P99,"); 
     8461:  533:            fprintf(stdout, "identifier,\t\"");
     8461:  534:            fprintf(stdout, "%s",token_ptr->token_string);
     8461:  535:            fprintf(stdout, "\".\n");
     8461:  536:            return(TRUE);
        -:  537:
     1919:  538:        case 18: 
     1919:  539:            fprintf(file_name,"P100,"); 
     1919:  540:            fprintf(stdout, "numeric,\t");
     1919:  541:            fprintf(stdout, "%s",token_ptr->token_string);
     1919:  542:            fprintf(stdout, ".\n");
     1919:  543:            return(TRUE);
        -:  544:
      606:  545:        case 19: 
      606:  546:            fprintf(file_name,"P101,"); 
      606:  547:            fprintf(stdout, "lparen.\n");
      606:  548:            return(TRUE);
        -:  549:
      652:  550:        case 20: 
      652:  551:            fprintf(file_name,"P102,"); 
      652:  552:            fprintf(stdout, "rparen.\n");
      652:  553:            return(TRUE);
        -:  554:
      653:  555:        case 21: 
      653:  556:            fprintf(file_name,"P103,"); 
      653:  557:            fprintf(stdout, "lsquare.\n");
      653:  558:            return(TRUE);
        -:  559:
      671:  560:        case 22: 
      671:  561:            fprintf(file_name,"P104,"); 
      671:  562:            fprintf(stdout, "rsquare.\n");
      671:  563:            return(TRUE);
        -:  564:
      660:  565:        case 23: 
      660:  566:            fprintf(file_name,"P105,"); 
      660:  567:            fprintf(stdout, "quote.\n");
      660:  568:            return(TRUE);
        -:  569:
      654:  570:        case 24: 
      654:  571:            fprintf(file_name,"P106,"); 
      654:  572:            fprintf(stdout, "bquote.\n");
      654:  573:            return(TRUE);
        -:  574:
      633:  575:        case 25: 
      633:  576:            fprintf(file_name,"P107,"); 
      633:  577:            fprintf(stdout, "comma.\n");
      633:  578:            return(TRUE);
        -:  579:
     1691:  580:        case 27: 
     1691:  581:            fprintf(file_name,"P108,"); 
     1691:  582:            fprintf(stdout, "string,\t");
     1691:  583:            fprintf(stdout, "%s",token_ptr->token_string);
     1691:  584:            fprintf(stdout, ".\n");
     1691:  585:            return(TRUE);
        -:  586:
     1902:  587:        case 29: 
     1902:  588:            fprintf(file_name,"P109,"); 
     1902:  589:            fprintf(stdout, "character,\t\"");
     1902:  590:            fprintf(stdout, "%s",token_ptr->token_string);
     1902:  591:            fprintf(stdout, "\".\n");
     1902:  592:            return(TRUE);
        -:  593:
      502:  594:        case 32: 
      502:  595:            fprintf(file_name,"P110,"); 
      502:  596:            fprintf(stdout, "keyword,\t\"=>\".\n");
      502:  597:            return(TRUE);
        -:  598:
    #####:  599:        default: 
    #####:  600:            fprintf(file_name,"P111,");
    #####:  601:            break;
        -:  602:    }
    #####:  603:    fprintf(file_name,"P112,");
    #####:  604:    return(FALSE);
        -:  605:}
        -:  606:
    21652:  607:static get_actual_token(token_str,token_ind)
        -:  608:int token_ind;
        -:  609:char token_str[];
        -:  610:{
        -:  611:    int ind,start;
    21652:  612:    fprintf(file_name,"P113,");
    24189:  613:    for(ind=token_ind;ind>0 && isspace(token_str[ind-1]);--ind);
    21652:  614:    fprintf(file_name,"P114,");
    21652:  615:    token_str[ind]='\0';token_ind=ind;
    21652:  616:    fprintf(file_name,"P115,");
    36421:  617:    for(ind=0;ind<token_ind;++ind)
        -:  618:    {
    36367:  619:        fprintf(file_name,"P116,");
    36367:  620:        if(!isspace(token_str[ind]))
        -:  621:        {
    21598:  622:            fprintf(file_name,"P117,");
    21598:  623:            break;
        -:  624:        }
        -:  625:    }
        -:  626:        
    21652:  627:    fprintf(file_name,"P118,");   
   123406:  628:    for(start=0;ind<=token_ind;++start,++ind)
        -:  629:    {
   101754:  630:        fprintf(file_name,"P119,");
   101754:  631:        token_str[start]=token_str[ind];
        -:  632:    }
    21652:  633:    fprintf(file_name,"P120,");
    21652:  634:    return;
        -:  635:}
